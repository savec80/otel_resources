exporters:
  signalfx:
    access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
    api_url: https://api.us1.signalfx.com
    correlation: null
    ingest_url: https://ingest.us1.signalfx.com
    sync_host_metadata: true
  sapm:
    access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
    endpoint: https://ingest.us1.signalfx.com/v2/trace
extensions:
  health_check: null
  k8s_observer:
    auth_type: serviceAccount
    node: ${K8S_NODE_NAME}
    observe_pods: true
  memory_ballast:
    size_mib: ${SPLUNK_BALLAST_SIZE_MIB}
  zpages: null
processors:
  attributes/add_lower_environment:
    actions:
    - key: environment
      value: ${CLUSTER_ID}
      action: insert
  resource/add_lower_environment:
    attributes:
      action: insert
      value: ${CLUSTER_ID}
      key: environment
  batch: null
  filter/logs:
    logs:
      exclude:
        match_type: strict
        resource_attributes:
        - key: splunk.com/exclude
          value: "true"
  groupbyattrs/logs:
    keys:
    - com.splunk.source
    - com.splunk.sourcetype
    - container.id
    - fluent.tag
    - istio_service_name
    - k8s.container.name
    - k8s.namespace.name
    - k8s.pod.name
    - k8s.pod.uid
  k8sattributes:
    extract:
      annotations:
      - from: pod
        key: splunk.com/sourcetype
      - from: namespace
        key: splunk.com/exclude
        tag_name: splunk.com/exclude
      - from: pod
        key: splunk.com/exclude
        tag_name: splunk.com/exclude
      - from: namespace
        key: splunk.com/index
        tag_name: com.splunk.index
      - from: pod
        key: splunk.com/index
        tag_name: com.splunk.index
      labels:
      - key: app
      metadata:
      - k8s.namespace.name
      - k8s.node.name
      - k8s.pod.name
      - k8s.pod.uid
      - container.id
      - container.image.name
      - container.image.tag
    filter:
      node_from_env_var: K8S_NODE_NAME
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: ip
    - sources:
      - from: connection
    - sources:
      - from: resource_attribute
        name: host.name
  memory_limiter:
    check_interval: 2s
    limit_mib: ${SPLUNK_MEMORY_LIMIT_MIB}
  resource:
    attributes:
    - action: insert
      key: k8s.node.name
      value: ${K8S_NODE_NAME}
    - action: upsert
      key: k8s.cluster.name
      value: ${CLUSTER_ID}
    - action: upsert
      key: cluster
      value: ${CLUSTER_ID}
  resource/add_agent_k8s:
    attributes:
    - action: insert
      key: k8s.pod.name
      value: ${K8S_POD_NAME}
    - action: insert
      key: k8s.pod.uid
      value: ${K8S_POD_UID}
    - action: insert
      key: k8s.namespace.name
      value: ${K8S_NAMESPACE}
  resource/add_appcode:
    attributes:
    - action: insert
      key: appcode
      value: ITOS-008
  resource/logs:
    attributes:
    - action: upsert
      from_attribute: k8s.pod.annotations.splunk.com/sourcetype
      key: com.splunk.sourcetype
    - action: delete
      key: k8s.pod.annotations.splunk.com/sourcetype
    - action: delete
      key: splunk.com/exclude
  resourcedetection:
    detectors:
    - env
    - system
    override: true
    timeout: 10s
receivers:
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.time:
            enabled: true
          system.cpu.utilization:
            enabled: true
      disk:
      filesystem:
      load:
        metrics:
          system.cpu.load_average.1m:
            enabled: true
          system.cpu.load_average.15m:
            enabled: true
      memory: null
      network:
        metrics:

      paging: null
      processes: null
  kubeletstats:
    auth_type: serviceAccount
    collection_interval: 10s
    endpoint: ${K8S_NODE_IP}:10250
    extra_metadata_labels:
    - container.id
    metric_groups:
    - container
    - pod
    - node

  smartagent/signalfx-forwarder:
    type: signalfx-forwarder
    listenAddress: 0.0.0.0:9080
    defaultSpanTags:
      environment: ${CLUSTER_ID}

  smartagent/prometheus-exporter/0:
    type: prometheus-exporter
    port: 9100
    skipVerify: true
    useServiceAccount: true
    useHTTPS: true
    host: node-exporter.openshift-monitoring.svc.cluster.local
    discoveryRule: port >= 9100 && port <= 9500  && pod.namespace == "openshift-monitoring" && name contains "node-exporter"

  smartagent/prometheus-exporter/1:
    caCertPath: /etc/prometheus/secrets/kube-etcd-client-certs/etcd-client-ca.crt
    clientCertPath: /etc/prometheus/secrets/kube-etcd-client-certs/etcd-client.crt
    clientKeyPath: /etc/prometheus/secrets/kube-etcd-client-certs/etcd-client.key
    port: 9979
    type: prometheus-exporter
    useHTTPS: true
    host: etcd.openshift-etcd.svc.cluster.local
    # validateDiscoveryRule: true
    discoveryRule: type == "port" && pod.namespace == "openshift-etcd" && (pod.name matches "^etcd-.*?-master" || pod.name matches "^etcd-ip-")

  smartagent/kubernetes-volumes:
    datapointsToExclude:
    - dimensions:
        kubernetes_namespace:
        - '*'
        - '!pub--*'
      metricName: kubernetes.volume_inodes
    - dimensions:
        kubernetes_namespace:
        - '*'
        - '!pub--*'
      metricName: kubernetes.volume_inodes_free
    - dimensions:
        kubernetes_namespace:
        - '*'
        - '!pub--*'
      metricName: kubernetes.volume_inodes_used
    extraMetrics:
    - kubernetes.volume_inodes
    - kubernetes.volume_inodes_free
    - kubernetes.volume_inodes_used
    kubeletAPI:
      authType: serviceAccount
      skipVerify: true
      url: https://${K8S_NODE_NAME}:10250
    type: kubernetes-volumes

  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  jaeger:
    protocols:
      grpc:
        endpoint: localhost:14250
      thrift_binary:
        endpoint: localhost:6832
      thrift_compact:
        endpoint: localhost:6831
      thrift_http:
        endpoint: localhost:14268

  prometheus/agent:
    config:
      scrape_configs:
      - job_name: otel-agent
        scrape_interval: 10s
        static_configs:
        - targets:
          - ${K8S_POD_IP}:8889

  receiver_creator/1:
    receivers:
      smartagent/coredns:
        config:
          extraDimensions:
            metric_source: k8s-coredns
          port: 9154
          skipVerify: true
          type: coredns
          useHTTPS: true
          useServiceAccount: true
        rule: type == "pod" && namespace == "openshift-dns" && name contains "dns"
      smartagent/kube-controller-manager:
        config:
          extraDimensions:
            metric_source: kubernetes-controller-manager
          port: 10257
          skipVerify: true
          type: kube-controller-manager
          useHTTPS: true
          useServiceAccount: true
        rule: type == "pod" && labels["app"] == "kube-controller-manager" && labels["kube-controller-manager"]
          == "true"
      smartagent/kubernetes-apiserver:
        config:
          extraDimensions:
            metric_source: kubernetes-apiserver
          skipVerify: true
          type: kubernetes-apiserver
          useHTTPS: true
          useServiceAccount: true
        rule: type == "port" && port == 6443 && pod.labels["app"] == "openshift-kube-apiserver" && pod.labels["apiserver"] == "true"
    watch_observers:
    - k8s_observer
  signalfx:
    endpoint: 0.0.0.0:9943
service:
  extensions:
  - health_check
  - k8s_observer
  - memory_ballast
  - zpages
  pipelines:
    metrics:
      exporters:
      - signalfx
      processors:
      - memory_limiter
      - batch
      - resourcedetection
      - resource
      - resource/add_appcode
      - resource/add_lower_environment
      receivers:
      - receiver_creator/1
      - hostmetrics
      - kubeletstats
      - otlp
      - signalfx
      - smartagent/kubernetes-volumes
      - smartagent/prometheus-exporter/0
      - smartagent/prometheus-exporter/1
      - smartagent/signalfx-forwarder
    metrics/agent:
      exporters:
      - signalfx
      processors:
      - memory_limiter
      - batch
      - resource/add_agent_k8s
      - resourcedetection
      - resource
      receivers:
      - prometheus/agent
    traces:
      exporters:
      - sapm
      - signalfx
      processors:
      - memory_limiter
      - batch
      - resource/add_lower_environment
      - attributes/add_lower_environment
      - resourcedetection
      receivers:
      - otlp
      - smartagent/signalfx-forwarder
      - jaeger
  telemetry:
    metrics:
      address: 0.0.0.0:8889
